#!/bin/sh /etc/rc.common
#
# Copyright 2019 Xingwang Liao <kuoruan@gmail.com>
# Licensed to the public under the MIT License.
#

START=99
USE_PROCD=1

NAME=v2ray
CONFIG_FOLDER=/var/etc/$NAME

FILE_V2RAY_DNSMASQ=/tmp/dnsmasq.d/$NAME
FILE_V2RAY_DNSMASQ_CACHE=/tmp/$NAME.dnsmasq.cache

IPSET_SRC_IGNORE_V4=v2ray_src_ignore_v4
IPSET_SRC_IGNORE_V6=v2ray_src_ignore_v6
IPSET_DST_PROXY_V4=v2ray_dst_proxy_v4
IPSET_DST_PROXY_V6=v2ray_dst_proxy_v6
IPSET_DST_DIRECT_V4=v2ray_dst_direct_v4
IPSET_DST_DIRECT_V6=v2ray_dst_direct_v6

OUTBOUND_SERVERS_V4=
OUTBOUND_SERVERS_V6=

TRANSPARENT_PROXY_EXPECTED=0
TRANSPARENT_PROXY_PORT=
TRANSPARENT_PROXY_ADDITION=

DNSMASQ_RESTART_EXPECTED=0

if [ -r /usr/share/libubox/jshn.sh ] ; then
	. /usr/share/libubox/jshn.sh
elif [ -r /lib/functions/jshn.sh ] ; then
	. /lib/functions/jshn.sh
else
	logger -p daemon.err -t "$NAME" "Package required: jshn."
	echo "[err] Package required: jshn." >&2
	exit 1
fi

_log() {
	local level="$1" ; shift
	local msg="$@"
	logger -p "daemon.$level" -t "$NAME" "$msg"

	echo "[$level] $msg" >&2
}

_info() {
	_log "info" $@
}

_err() {
	_log "err" $@
}

get_value_from_json() {
	local json="$1"
	local key="$2"

	test -n "$json" || return

	local value=""

	local old_ns
	json_set_namespace "json_key" old_ns
	json_load "$json"
	json_get_var "$key" value
	json_cleanup
	json_set_namespace "$old_ns"

	echo "$value"
}

get_commands_from_json() {
	local json="$1"

	test -n "$json" || return

	jshn -r "$json" 2>/dev/null | grep -v "json_init"
}

get_json_content() {
	local type="$1"
	local key="$2"

	test -n "$key" || return

	cat >&1 <<-EOF | lua - 2>/dev/null
		local v2ray = require "luci.model.v2ray"
		local json = v2ray.get_${type}("$key")
		print(json)
	EOF
}

get_file_content() {
	local filename="$1"

	test -n "$filename" || return
	test -r "/etc/v2ray/${filename}.txt" || return

	cat "/etc/v2ray/${filename}.txt" | grep -v "^$"
}

append_server_ipv4() {
	local address="$1"

	test -n "$address" || return

	if [ -z "$OUTBOUND_SERVERS_V4" ] ; then
		OUTBOUND_SERVERS_V4="$address"
	else
		OUTBOUND_SERVERS_V4="$(cat >&1 <<-EOF
			$OUTBOUND_SERVERS_V4
			$address
		EOF
		)"
	fi
}

append_server_ipv6() {
	local address="$1"

	test -n "$address" || return

	if [ -z "$OUTBOUND_SERVERS_V6" ] ; then
		OUTBOUND_SERVERS_V6="$address"
	else
		OUTBOUND_SERVERS_V6="$(cat >&1 <<-EOF
			$OUTBOUND_SERVERS_V6
			$address
		EOF
		)"
	fi
}

v2ray_section_validate() {
	uci_validate_section "$NAME" "v2ray" "$1" \
		'enabled:bool:0' \
		'v2ray_file:string' \
		'asset_location:directory' \
		'config_file:file' \
		'loglevel:or("debug", "info", "warning", "error", "none")' \
		'access_log:string' \
		'error_log:string' \
		'stats_enabled:bool:0' \
		'transport_enabled:bool:0' \
		'transport:string' \
		'inbounds:list(uci("v2ray", "@inbound"))' \
		'outbounds:list(uci("v2ray", "@outbound"))'
}

dns_section_validate() {
	uci_validate_section "$NAME" "dns" "$1" \
		'enabled:bool:0' \
		'tag:string' \
		'client_ip:ipaddr' \
		'hosts:list(string)' \
		'servers:list(uci("v2ray", "@dns_server"))'
}

dns_server_section_validate() {
	uci_validate_section "$NAME" "dns_server" "$1" \
		'address:ipaddr' \
		'port:port' \
		'domains:list(string)'
}

routing_section_validate() {
	uci_validate_section "$NAME" "routing" "$1" \
		'enabled:bool:0' \
		'domain_strategy:or("AsIs", "IPIfNonMatch", "IPOnDemand")' \
		'rules:list(uci("v2ray", "@routing_rule"))' \
		'balancers:list(uci("v2ray", "@routing_balancer"))'
}

routing_rule_section_validate() {
	uci_validate_section "$NAME" "routing_rule" "$1" \
		'type:"field"' \
		'domain:list(string)' \
		'ip:list(string)' \
		'port:or(port, portrange)' \
		'network:list(or("tcp", "udp"))' \
		'source:list(string)' \
		'user:list(string)' \
		'inbound_tag:list(string)' \
		'protocol:list(or("http", "tls", "bittorrent"))' \
		'attrs:string' \
		'outbound_tag:string' \
		'balancer_tag:string'
}

routing_balancer_section_validate() {
	uci_validate_section "$NAME" "routing_balancer" "$1" \
		'tag:string' \
		'selector:list(string)'
}

policy_section_validate() {
	uci_validate_section "$NAME" "policy" "$1" \
		'enabled:bool:0' \
		'levels:list(uci("v2ray", "@policy_level"))' \
		'system_stats_inbound_uplink:bool:0' \
		'system_stats_inbound_downlink:bool:0'
}

policy_level_section_validate() {
	uci_validate_section "$NAME" "policy_level" "$1" \
		'level:uinteger' \
		'handshake:uinteger:4' \
		'conn_idle:uinteger:300' \
		'uplink_only:uinteger:2' \
		'downlink_only:uinteger:5' \
		'stats_user_uplink:bool:0' \
		'stats_user_downlink:bool:0' \
		'buffer_size:uinteger'
}

reverse_section_validate() {
	uci_validate_section "$NAME" "reverse" "$1" \
		'enabled:bool:0' \
		'bridges:list(string)' \
		'portals:list(string)'
}

inbound_section_validate() {
	uci_validate_section "$NAME" "inbound" "$1" \
		'port:or(port, portrange, string)' \
		'listen:ipaddr:0.0.0.0' \
		'protocol:string' \
		'settings:string' \
		'stream_settings:string' \
		'tag:string' \
		'sniffing_enabled:bool:0' \
		'sniffing_dest_override:list(or("http", "tls"))' \
		'allocate_strategy:or("always", "random")' \
		'allocate_refresh:uinteger' \
		'allocate_concurrency:uinteger'
}

outbound_section_validate() {
	uci_validate_section "$NAME" "outbound" "$1" \
		'send_through:ipaddr:0.0.0.0' \
		'protocol:string' \
		'tag:string' \
		'settings:string' \
		'stream_settings:string' \
		'proxy_settings_tag:string' \
		'mux_enabled:bool:0' \
		'mux_concurrency:uinteger:8'
}

transparent_proxy_section_validate() {
	uci_validate_section "$NAME" "transparent_proxy" "$1" \
		'redirect_port:port' \
		'udp_proxy_enabled:bool:0' \
		'dns_proxy_enabled:bool:0' \
		'proxy_mode:or("default", "cn_direct", "cn_proxy", "gfwlist_proxy"):default' \
		'proxy_list_dns:string' \
		'direct_list_dns:string'
}

add_v2ray_rules() {
	local port="$1"
	local ext_args="$2"
	local addition_proxy="$3"

	iptables-restore --noflush <<-EOF 2>/dev/null
		*nat
		:V2RAY -
		-A V2RAY -p tcp -j RETURN -m mark --mark 0xff
		-A V2RAY -p tcp -m set --match-set $IPSET_DST_DIRECT_V4 dst -j RETURN
		-A V2RAY -p tcp $ext_args -j REDIRECT --to-ports $port
		-A PREROUTING -p tcp -j V2RAY
		-A OUTPUT -p tcp -j V2RAY
		COMMIT
	EOF

	if [ -n "$addition_proxy" ] ; then
		ip route add local default dev lo table 100 2>/dev/null
		ip rule add fwmark 1 lookup 100

		local d_port=""
		if [ "$addition_proxy" = "dns" ] ; then
			d_port="--dport 53"
		fi

		iptables-restore --noflush <<-EOF 2>/dev/null
			*mangle
			:V2RAY -
			-A V2RAY -p udp -j RETURN -m mark --mark 0xff
			-A V2RAY -p udp $d_port -j TPROXY --on-port $port --tproxy-mark 0x01/0x01
			-A PREROUTING -p udp -j V2RAY

			:V2RAY_MARK -
			-A V2RAY_MARK -p udp -j RETURN -m mark --mark 0xff
			-A V2RAY_MARK -p udp $d_port -j MARK --set-mark 1
			-A OUTPUT -p udp -j V2RAY_MARK
			COMMIT
		EOF
	fi
}

clear_v2ray_rules() {
	iptables-save --counters | grep -v "V2RAY" | iptables-restore --counters

	while ip rule del fwmark 1 lookup 100 2>/dev/null ; do true ; done

	ip route flush table 100
	ip route del local default dev lo table 100 2>/dev/null
}

create_v2ray_ipset() {
	local outbound_v4="$1"
	local outbound_v6="$2"

	# https://en.wikipedia.org/wiki/Reserved_IP_addresses
	local reserved_v4="$(cat >&1 <<-EOF
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.88.99.0/24
		192.168.0.0/16
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
	EOF
	)"

	local reserved_v6="$(cat >&1 <<-EOF
		::
		::/128
		::1/128
		::ffff:0:0/96
		::ffff:0:0:0/96
		64:ff9b::/96
		100::/64
		2001::/32
		2001:20::/28
		2001:db8::/32
		2002::/16
		fc00::/7
		fe80::/10
		ff00::/8
	EOF
	)"

	ipset -! restore <<-EOF 2>/dev/null
		create $IPSET_SRC_IGNORE_V4 hash:ip hashsize 64 family inet
		create $IPSET_SRC_IGNORE_V6 hash:ip hashsize 64 family inet6
		create $IPSET_DST_PROXY_V4 hash:net hashsize 64 family inet
		create $IPSET_DST_PROXY_V6 hash:net hashsize 64 family inet6
		create $IPSET_DST_DIRECT_V4 hash:net hashsize 64 family inet
		create $IPSET_DST_DIRECT_V6 hash:net hashsize 64 family inet6
		$(echo "$reserved_v4" | sed "s/^/add $IPSET_DST_DIRECT_V4 /")
		$(echo "$reserved_v6" | sed "s/^/add $IPSET_DST_DIRECT_V6 /")
		$(echo "$outbound_v4" | grep -v "^$" | sed "s/^/add $IPSET_DST_DIRECT_V4 /")
		$(echo "$outbound_v6" | grep -v "^$" | sed "s/^/add $IPSET_DST_DIRECT_V6 /")
	EOF
}

destroy_v2ray_ipset() {
	ipset -! restore <<-EOF 2>/dev/null
		$(ipset -n list | grep "^v2ray" | sed "s/^/destroy /")
	EOF
}

init_rules_for_listfile() {
	local direct_list_dns="$1"
	local proxy_list_dns="$2"

	echo "# AUTO-GENERATED FILE. DO NOT MODIFY." >"$FILE_V2RAY_DNSMASQ_CACHE"

	# For direct list
	local direct_content
	direct_content="$(get_file_content "directlist")"

	echo "$direct_content" | \
		grep -oE "[0-9]{1,3}(\.[0-9]{1,3}){3}(/[0-9]{1,2})?" | \
		sed "s/^/add $IPSET_DST_DIRECT_V4 /" | \
		ipset -! restore 2>/dev/null

	echo "$direct_content" | \
		grep -oE "([0-9a-fA-F]{0,4}:){1,7}([0-9a-fA-F]){0,4}(/[0-9]{1,2})?" | \
		sed "s/^/add $IPSET_DST_DIRECT_V6 /" | \
		ipset -! restore 2>/dev/null

	if [ -n "$direct_list_dns" ] ; then
		echo "$direct_content" | \
			grep -oE "([0-9a-zA-Z_-]+\.)+[a-zA-Z]{2,}$" | \
			sed "s|.*|server=/&/$direct_list_dns\nipset=/&/$IPSET_DST_DIRECT_V4,$IPSET_DST_DIRECT_V6|" \
			>>"$FILE_V2RAY_DNSMASQ_CACHE"
	else
		echo "$direct_content" | \
			grep -oE "([0-9a-zA-Z_-]+\.)+[a-zA-Z]{2,}$" | \
			sed "s|.*|ipset=/&/$IPSET_DST_DIRECT_V4,$IPSET_DST_DIRECT_V6|" \
			>>"$FILE_V2RAY_DNSMASQ_CACHE"
	fi

	# For proxy list
	local proxy_content
	proxy_content="$(get_file_content "proxylist")"

	echo "$proxy_content" | \
		grep -oE "[0-9]{1,3}(\.[0-9]{1,3}){3}(/[0-9]{1,2})?" | \
		sed "s/^/add $IPSET_DST_PROXY_V4 /" | \
		ipset -! restore 2>/dev/null

	echo "$proxy_content" | \
		grep -oE "([0-9a-fA-F]{0,4}:){1,7}([0-9a-fA-F]){0,4}(/[0-9]{1,2})?" | \
		sed "s/^/add $IPSET_DST_PROXY_V6 /" | \
		ipset -! restore 2>/dev/null

	if [ -n "$proxy_list_dns" ] ; then
		echo "$proxy_content" | \
			grep -oE "([0-9a-zA-Z_-]+\.)+[a-zA-Z]{2,}$" | \
			sed "s|.*|server=/&/$proxy_list_dns\nipset=/&/$IPSET_DST_PROXY_V4,$IPSET_DST_PROXY_V6|" \
			>>"$FILE_V2RAY_DNSMASQ_CACHE"
	else
		echo "$proxy_content" | \
			grep -oE "([0-9a-zA-Z_-]+\.)+[a-zA-Z]{2,}$" | \
			sed "s|.*|ipset=/&/$IPSET_DST_PROXY_V4,$IPSET_DST_PROXY_V6|" \
			>>"$FILE_V2RAY_DNSMASQ_CACHE"
	fi
}

gracefully_restart_dnsmasq() {
	local restart="${1:-$DNSMASQ_RESTART_EXPECTED}"

	if [ "x$restart" = "x1" ] ; then
		_info "Restarting dnsmasq..."
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
		DNSMASQ_RESTART_EXPECTED=0
	fi
}

add_dns_settings() {
	local section="${1}_dns"

	if ! dns_section_validate "$section" ; then
		_err "Invalid DNS config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "DNS disabled: $section"
		return 0
	fi

	json_add_object "dns"

	test -n "$tag" && \
		json_add_string "tag" "$tag"
	test -n "$client_ip" && \
		json_add_string "clientIp" "$client_ip"

	if [ -n "$hosts" ] ; then
		json_add_object "hosts"

		local h
		for h in $hosts ; do
			local domain="$(echo "$h" | cut -d'|' -f1)"
			local ip="$(echo "$h" | cut -d'|' -f2)"

			if [ -n "$domain" ] && [ -n "$ip" ] ; then
				json_add_string "$domain" "$ip"
			fi
		done

		json_close_object
	fi

	if [ -n "$servers" ] ; then
		json_add_array "servers"

		for ss in $servers ; do
			if dns_server_section_validate "$ss" ; then
				if [ -z "$address" ] ; then
					continue
				fi

				if [ -z "$port" ] && [ -z "$domains" ] ; then
					json_add_string "" "$address"
				else
					json_add_object ""
					json_add_string "address" "$address"

					if [ -n "$port" ] ; then
						json_add_int "port" "$port"
					else
						json_add_int "port" "53"
					fi

					if [ -n "$domains" ] ; then
						json_add_array "domains"

						local d
						for d in $domains ; do
							json_add_string "" "$d"
						done

						json_close_array
					fi

					json_close_object
				fi
			fi
		done

		json_close_array
	fi

	json_close_object
}

add_routing_settings() {
	local section="${1}_routing"

	if ! routing_section_validate "$section" ; then
		_err "Invalid routing config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Routing disabled: $section"
		return 0
	fi

	json_add_object "routing"

	test -n "$domain_strategy" && \
		json_add_string "domainStrategy" "$domain_strategy"

	if [ -n "$rules" ] ; then
		json_add_array "rules"

		local rs
		for rs in $rules ; do
			if routing_rule_section_validate "$rs" ; then
				json_add_object ""

				json_add_string "type" "$type"

				if [ -n "$domain" ] ; then
					json_add_array "domain"
					local d
					for d in $domain ; do
						json_add_string "" "$d"
					done
					json_close_array
				fi

				if [ -n "$ip" ] ; then
					json_add_array "ip"
					local i
					for i in $ip ; do
						json_add_string "" "$i"
					done
					json_close_array
				fi

				if [ -n "$port" ] ; then
					json_add_string "port" "$(echo "$port" | tr -s ' ' ',')"
				fi

				if [ -n "$network" ] ; then
					json_add_string "network" "$(echo "$network" | tr -s ' ' ',')"
				fi

				if [ -n "$source" ] ; then
					json_add_array "source"
					local s
					for s in $source ; do
						json_add_string "" "$s"
					done
					json_close_array
				fi

				if [ -n "$user" ] ; then
					json_add_array "user"
					local u
					for u in $user ; do
						json_add_string "" "$u"
					done
					json_close_array
				fi

				if [ -n "$inbound_tag" ] ; then
					json_add_array "inboundTag"
					local it
					for it in $inbound_tag ; do
						json_add_string "" "$it"
					done
					json_close_array
				fi

				if [ -n "$protocol" ] ; then
					json_add_array "protocol"
					local p
					for p in $protocol ; do
						json_add_string "" "$p"
					done
					json_close_array
				fi

				test -n "$attrs" && \
					json_add_string "attrs" "$attrs"
				test -n "$outbound_tag" && \
					json_add_string "outboundTag" "$outbound_tag"
				test -n "$balancer_tag" && \
					json_add_string "balancerTag" "$balancer_tag"

				json_close_object
			fi
		done

		json_close_array
	fi

	if [ -n "$balancers" ] ; then
		json_add_array "balancers"
		local bs
		for bs in $balancers ; do
			if routing_balancer_section_validate "$bs" ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_array "selector"
				local s
				for s in $selector ; do
					json_add_string "" "$s"
				done
				json_close_array
				json_close_object
			fi
		done
		json_close_array
	fi

	json_close_object
}

add_policy_settings() {
	local section="${1}_policy"

	if ! policy_section_validate "$section" ; then
		_err "Invalid policy config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Policy disabled: $section"
		return 0
	fi

	json_add_object "policy"

	if [ -n "$levels" ] ; then
		json_add_object "levels"
		local l_s
		for l_s in $levels ; do
			if policy_level_section_validate "$l_s" ; then
				json_add_object "$level"
				json_add_int "handshake" "$handshake"
				json_add_int "connIdle" "$conn_idle"
				json_add_int "uplinkOnly" "$uplink_only"
				json_add_int "downlinkOnly" "$downlink_only"
				json_add_boolean "statsUserUplink" "$stats_user_uplink"
				json_add_boolean "statsUserDownlink" "$stats_user_downlink"
				test -n "$buffer_size" && \
					json_add_int "bufferSize" "$buffer_size"
				json_close_object
			fi
		done
		json_close_object
	fi

	json_add_object "system"
	json_add_boolean "statsInboundUplink" "$system_stats_inbound_uplink"
	json_add_boolean "statsInboundDownlink" "$system_stats_inbound_downlink"
	json_close_object

	json_close_object
}

add_reverse_settings() {
	local section="${1}_reverse"

	if ! reverse_section_validate "$section" ; then
		_err "Invalid reverse config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Reverse disabled: $section"
		return 0
	fi

	json_add_object "reverse"

	if [ -n "$bridges" ] ; then
		json_add_array "bridges"
		local b
		for b in $bridges ; do
			local tag="$(echo "$b" | cut -d'|' -f1)"
			local domain="$(echo "$b" | cut -d'|' -f2)"
			if [ -n "$tag" ] && [ -n "$domain" ] ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_string "domain" "$domain"
				json_close_object
			fi
		done
		json_close_array
	fi

	if [ -n "$portals" ] ; then
		json_add_array "portals"
		local p
		for p in $portals ; do
			local tag="$(echo "$p" | cut -d'|' -f1)"
			local domain="$(echo "$p" | cut -d'|' -f2)"
			if [ -n "$tag" ] && [ -n "$domain" ] ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_string "domain" "$domain"
				json_close_object
			fi
		done
		json_close_array
	fi

	json_close_object
}

add_transport_settings() {
	local key="$1"

	if [ -z "$key" ] ; then
		_err "Transport config key is empty."
		return 1
	fi

	local json
	json="$(get_json_content "transport" "$key")"
	if [ -z "$json" ] ; then
		_err "Invalid transport config: $key"
		return 1
	fi

	json_add_object "transport"
	eval "$(get_commands_from_json "$json")"
	json_close_object
}

add_inbound_setting() {
	local section="$1"

	if ! inbound_section_validate "$section" ; then
		_err "Invalid inbound section: $section"
		return 1
	fi

	json_add_object ""

	json_add_string "listen" "$listen"
	json_add_int "port" "$port"
	json_add_string "protocol" "$protocol"

	test -n "$tag" && \
		json_add_string "tag" "$tag"

	json_add_object "sniffing"
	json_add_boolean "enabled" "$sniffing_enabled"
	if [ -n "$sniffing_dest_override" ] ; then
		json_add_array "destOverride"
		local d
		for d in $sniffing_dest_override ; do
			json_add_string "" "$d"
		done
		json_close_array
	fi
	json_close_object

	if [ -n "$allocate_strategy" ] ; then
		json_add_object "allocate"
		json_add_string "strategy" "$allocate_strategy"
		test -n "$allocate_refresh" && \
			json_add_int "refresh" "$allocate_refresh"
		test -n "$allocate_concurrency" &&	\
			json_add_int "concurrency" "$allocate_concurrency"
		json_close_object
	fi

	add_redirect_settings() {
		if [ "x$protocol" = "xdokodemo-door" ] && \
			[ -n "$port" ] && [ "x$port" = "x$TRANSPARENT_PROXY_PORT" ] ; then
			local settings_network="tcp"

			test -n "$TRANSPARENT_PROXY_ADDITION" && \
				settings_network="$settings_network,udp"

			json_add_boolean "followRedirect" "1"
			json_add_string "network" "$settings_network"
		fi
	}

	local settings_json
	settings_json="$(get_json_content "setting" "$settings")"

	if [ -n "$settings_json" ] ; then
		json_add_object "settings"
		eval "$(get_commands_from_json "$settings_json")"
		add_redirect_settings
		json_close_object
	else
		json_add_object "settings"
		add_redirect_settings
		json_close_object
	fi

	local stream_settings_json
	stream_settings_json="$(get_json_content "stream_setting" "$stream_settings")"

	if [ -n "$stream_settings_json" ] ; then
		json_add_object "streamSettings"
		eval "$(get_commands_from_json "$stream_settings_json")"
		json_close_object
	fi

	json_close_object
}

add_outbound_setting() {
	local section="$1"

	if ! outbound_section_validate "$section" ; then
		_err "Invalid outbound section: $section"
		return 1
	fi

	json_add_object ""

	json_add_string "sendThrough" "$send_through"
	json_add_string "protocol" "$protocol"
	test -n "$tag" && \
		json_add_string "tag" "$tag"

	if [ -n "$proxy_settings_tag" ] ; then
		json_add_object "proxySettings"
		json_add_string "tag" "$proxy_settings_tag"
		json_close_object
	fi

	if [ "x$mux_enabled" = "x1" ] ; then
		json_add_object "mux"
		json_add_boolean "enabled" "1"
		json_add_int "concurrency" "$mux_concurrency"
		json_close_object
	fi

	local settings_json
	settings_json="$(get_json_content "setting" "$settings")"

	if [ -n "$settings_json" ] ; then
		local settings_commands
		settings_commands="$(get_commands_from_json "$settings_json")"

		json_add_object "settings"
		eval "$settings_commands"
		json_close_object

		local addr
		for addr in $(echo "$settings_commands" | sed -n "s/^json.*'address'[[:space:]]'\([^']*\)'.*/\1/p") ; do
			local ipv4
			for ipv4 in $(resolveip -4 -t 5 "$addr") ; do
				append_server_ipv4 "$ipv4"
			done

			local ipv6
			for ipv6 in $(resolveip -6 -t 5 "$addr") ; do
				append_server_ipv6 "$ipv6"
			done
		done
	fi

	add_sockopt_so_mark() {
		json_add_object "sockopt"
		json_add_int "mark" "255"
		json_close_object
	}

	local stream_settings_json
	stream_settings_json="$(get_json_content "stream_setting" "$stream_settings")"

	if [ -n "$stream_settings_json" ] ; then
		local stream_settings_commands
		stream_settings_commands="$(get_commands_from_json "$stream_settings_json")"

		json_add_object "streamSettings"
		eval "$stream_settings_commands"
		if ! ( echo "$stream_settings_commands" | grep -q "'sockopt'" ) ; then
			add_sockopt_so_mark
		fi
		json_close_object
	else
		json_add_object "streamSettings"
		add_sockopt_so_mark
		json_close_object
	fi

	json_close_object
}

init_transparent_proxy() {
	local tp_cfg="main_transparent_proxy"
	local redirect_port udp_proxy_enabled dns_proxy_enabled

	config_get redirect_port "$tp_cfg" "redirect_port"
	config_get udp_proxy_enabled "$tp_cfg" "udp_proxy_enabled"
	config_get dns_proxy_enabled "$tp_cfg" "dns_proxy_enabled"

	if [ -n "$redirect_port" ] && \
		! validate_data "port" "$redirect_port" 2>/dev/null ; then
		_err "Transparent proxy redirect port is invalid: $redirect_port"
		return 1
	fi

	TRANSPARENT_PROXY_PORT="$redirect_port"

	if [ "x$udp_proxy_enabled" = "x1" ] ; then
		TRANSPARENT_PROXY_ADDITION="udp"
	elif [ "x$dns_proxy_enabled" = "x1" ] ; then
		TRANSPARENT_PROXY_ADDITION="dns"
	else
		TRANSPARENT_PROXY_ADDITION=
	fi
}

setup_transparent_proxy() {
	if [ -z "$TRANSPARENT_PROXY_PORT" ] ; then
		_info "Transparent proxy disabled."
		return 0
	fi

	if [ "x$TRANSPARENT_PROXY_EXPECTED" != "x1" ] ; then
		_info "No v2ray instance enabled, skip transparent proxy."
		return 0
	fi

	_info "Setting transparent proxy on port: $TRANSPARENT_PROXY_PORT"

	local tp_cfg="main_transparent_proxy"
	local proxy_mode direct_list_dns proxy_list_dns

	config_get proxy_mode "$tp_cfg" "proxy_mode"
	config_get direct_list_dns "$tp_cfg" "direct_list_dns"
	config_get proxy_list_dns "$tp_cfg" "proxy_list_dns"

	_info "Transparent proxy mode: $proxy_mode"

	create_v2ray_ipset "$OUTBOUND_SERVERS_V4" "$OUTBOUND_SERVERS_V6"
	init_rules_for_listfile "$direct_list_dns" "$proxy_list_dns"

	local ext_args
	case "${proxy_mode:-default}" in
		"cn_direct")
			ipset -! restore <<-EOF 2>/dev/null
				$(get_file_content "chnroute" | sed "s/^/add $IPSET_DST_DIRECT_V4 /")
				$(get_file_content "chnroute6" | sed "s/^/add $IPSET_DST_DIRECT_V6 /")
			EOF
			ext_args=
			;;
		"cn_proxy")
			ipset -! restore <<-EOF 2>/dev/null
				$(get_file_content "chnroute" | sed "s/^/add $IPSET_DST_PROXY_V4 /")
				$(get_file_content "chnroute6" | sed "s/^/add $IPSET_DST_PROXY_V6 /")
			EOF
			ext_args="-m set --match-set $IPSET_DST_PROXY_V4 dst"
			;;
		"gfwlist_proxy")
			local gfwlist="$(get_file_content "gfwlist")"
			if [ -n "$PROXYLIST_DNS" ] ; then
				echo "$gfwlist" | \
					sed "s|.*|server=/&/$PROXYLIST_DNS\nipset=/&/$IPSET_DST_PROXY_V4,$IPSET_DST_PROXY_V6|" \
					>> "$FILE_V2RAY_DNSMASQ_CACHE"
			else
				echo "$gfwlist" | \
					sed "s|.*|ipset=/&/$IPSET_DST_PROXY_V4,$IPSET_DST_PROXY_V6|" \
					>> "$FILE_V2RAY_DNSMASQ_CACHE"
			fi
			ext_args="-m set --match-set $IPSET_DST_PROXY_V4 dst"
			;;
		*)
			ext_args=
			;;
	esac

	if [ -n "$(cat "$FILE_V2RAY_DNSMASQ_CACHE" | grep -v "^$" | grep -v "^#")" ] ; then
		cat "$FILE_V2RAY_DNSMASQ_CACHE" >"$FILE_V2RAY_DNSMASQ" 2>/dev/null
		DNSMASQ_RESTART_EXPECTED=1
	fi

	rm -f "$FILE_V2RAY_DNSMASQ_CACHE"

	add_v2ray_rules "$TRANSPARENT_PROXY_PORT" "$ext_args" "$TRANSPARENT_PROXY_ADDITION"
}

clear_transparent_proxy() {
	clear_v2ray_rules
	destroy_v2ray_ipset

	if [ -s "$FILE_V2RAY_DNSMASQ" ] ; then
		rm -f "$FILE_V2RAY_DNSMASQ"
		DNSMASQ_RESTART_EXPECTED=1
	fi
}

start_instance() {
	local section="$1"

	if ! v2ray_section_validate "$section" ; then
		_err "Invalid config."
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		return 0
	fi

	if [ -z "$v2ray_file" ] || [ ! -s "$v2ray_file" ] ; then
		_err "Invalid V2Ray file."
		return 1
	fi

	test -x "$v2ray_file" || chmod 755 "$v2ray_file"

	local temp_config

	if [ -n "$config_file" ] ; then
		if [ ! -s "$config_file" ] ; then
			_err "Config file not found: $config_file"
			return 1
		fi

		if ! ( eval "$v2ray_file --test --config=\"$config_file\" >/dev/null 2>&1" ) ; then
			_err "Validate config file failed: $config_file"
			return 1
		fi

		temp_config="$config_file"
	else
		test -d "$CONFIG_FOLDER" || mkdir -p "$CONFIG_FOLDER"

		temp_config="$CONFIG_FOLDER/v2ray.${section}.json"

		local old_ns
		json_set_namespace "$section" old_ns
		json_init

		if [ -n "$loglevel" ] && [ "$loglevel" != "none" ] ; then
			json_add_object "log"
			json_add_string "loglevel" "$loglevel"
			json_add_string "access" "$access_log"
			json_add_string "error" "$error_log"
			json_close_object
		fi

		if [ "x$stats_enabled" = "x1" ] ; then
			json_add_object "stats"
			json_close_object
		fi

		add_dns_settings "$section"
		add_routing_settings "$section"
		add_policy_settings "$section"
		add_reverse_settings "$section"

		if [ "x$transport_enabled" = "x1" ] ; then
			add_transport_settings "$transport"
		fi

		if [ -n "$inbounds" ] ; then
			json_add_array "inbounds"
			local is
			for is in $inbounds ; do
				add_inbound_setting "$is"
			done
			json_close_array
		fi

		if [ -n "$outbounds" ] ; then
			json_add_array "outbounds"
			local os
			for os in $outbounds ; do
				add_outbound_setting "$os"
			done
			json_close_array
		fi

		json_dump -i >"$temp_config"
		json_cleanup
		json_set_namespace "$old_ns"

		if [ ! -s "$temp_config" ] ; then
			_err "Error when create config file: $temp_config"
			return 1
		fi
	fi

	TRANSPARENT_PROXY_EXPECTED=1

	procd_open_instance "$NAME.$section"
	procd_set_param command "$v2ray_file"
	procd_append_param command "--config=$temp_config"
	procd_set_param respawn

	if [ -n "$asset_location" ] && [ -d "$asset_location" ] ; then
		procd_set_param env V2RAY_LOCATION_ASSET="$asset_location"
	fi

	procd_set_param limits nofile="102400 102400"
	procd_append_param limits core="unlimited"
	procd_set_param file "$temp_config"
	procd_set_param stderr 1 # forward stderr of the command to logd
	procd_set_param stdout 1
	procd_set_param pidfile "/var/run/${NAME}.${section}.pid"
	procd_close_instance
}

start_service() {
	config_load "$NAME"

	clear_transparent_proxy

	if ! init_transparent_proxy ; then
		gracefully_restart_dnsmasq
		return 1
	fi

	config_foreach start_instance "v2ray"

	setup_transparent_proxy

	gracefully_restart_dnsmasq

	unset OUTBOUND_SERVERS_V4 \
		OUTBOUND_SERVERS_V6 \
		TRANSPARENT_PROXY_EXPECTED \
		TRANSPARENT_PROXY_PORT \
		TRANSPARENT_PROXY_ADDITION \
		DNSMASQ_RESTART_EXPECTED
}

stop_service() {
	clear_transparent_proxy
	gracefully_restart_dnsmasq
}
